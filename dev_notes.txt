TF2 Mod Builder
==============================
I've been obsessing over Elements and Attributes for so long I've forgotten why
I was playing around with them in the first place, but more importantly, I can't
really progress with them as I haven't figured out what I actually want from
them. So this is back to the drawing board - making the app that made me arrive
at needing that, but now with what I've learned since. Then I'll figure out what
will work.

Specification
------------------------------
This is a tool to build a TF2 mod. What is a TF2 mod? It can be a number of things
but they're always a bunch of files, usually packed into a .vpk for performance
gains. A mod may have multiple .vpk files with slightly different contents, say
you are replacing a model, and you want a version that replaces another model but
has no other changes.

A mod contains assets. We will define an asset as something everything required
for a given component to work:

Asset Types
------------------------------
- File
    - just itself
- Texture
    - a .vtf file
    - a specific type of file
- Material
    - a .vmt file
    - may also use specific textures
- Model
    - uses .qc and .qci scripts to create a .mdl (and others)
    - may require new materials to work

For now, these are the assets of a mod. However a mod is not just assets, it is
made up of at least one collection of assets, the .vpk file. So:

- Package
    - contains a number of assets
    - has a unique name

The result:

Mod contains Package(s)
Package contains Asset(s)

We can take this a step further. When making mods a number of iterative versions are
created and the Mod is derived from this. This leads to:

Project contains Developer and Release
Developer contains Package(s)
Release contains Package(s)
Package contains Asset(s)

Alternatively, Package could be flagged as Developer or Release

Copy or Clone?
------------------------------



Architecture
------------------------------
Simplifying the display, editing and serialisation of data requires breaking it down
into the smallest individual components. To display data in a Qt model the data needs
to be in chunks that can be indexed. This requires that the data inherently allows this
or, there is an abstraction mechanism that translates the data to this format. Currently
Element-Attribute data is edited via the latter using ProxyID to make different classes
use a single identifier, then different behaviour comes from asking questions about the
represented data.

The alternative is to figure out how to represent the data structure with a system of
nodes so that behaviour that is shared is
